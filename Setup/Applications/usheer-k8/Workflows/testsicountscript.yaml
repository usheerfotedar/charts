harnessApiVersion: '1.0'
type: ROLLING
concurrencyStrategy: INFRA
envName: qa
failureStrategies:
- executionScope: WORKFLOW
  failureTypes:
  - APPLICATION_ERROR
  repairActionCode: ROLLBACK_WORKFLOW
  retryCount: 0
notificationRules:
- conditions:
  - FAILED
  executionScope: WORKFLOW
  notificationGroupAsExpression: false
  userGroupAsExpression: false
  userGroupIds:
  - tSS6OKRcRr2JMVRcuzTDOw
phases:
- type: KUBERNETES
  computeProviderName: usheertestk8new1234
  daemonSet: false
  infraDefinitionName: testk8
  name: Rolling
  phaseSteps:
  - type: K8S_PHASE_STEP
    name: Deploy
    steps:
    - type: SHELL_SCRIPT
      name: Shell Script
      properties:
        commandPath: null
        connectionAttributes: null
        executeOnDelegate: true
        host: null
        outputVars: ''
        publishAsVar: false
        scriptString: "#!/bin/bash\n#\n# Sample script to retrieve the Service Instance\
          \ (SI) count\n# Customize this to implement your chargeback model per application\n\
          #\n\n\nfn_run_query () {\ncurl -s \\\n-H 'x-api-key: '$HARNESS_API_KEY \\\
          \n-X POST \\\n-H 'Content-Type: application/json' \\\n--data @- \\\n'https://app.harness.io/gateway/api/graphql?accountId='$HARNESS_ACCOUNT_ID\n\
          }\n\nif [ $# -eq 0 ]; then\n  echo \"Usage getSI.sh <APP_NAME>\"\n  exit\
          \ 1\nfi\n\nAPP_NAME=$1\n\nRESPONSE=$(cat <<_EOF_ | fn_run_query \n{\"query\"\
          :\"\n {\n  applicationByName(name: \\\"${APP_NAME}\\\"){\n    id\n  }\n\
          \ }\"\n}\n_EOF_\n)\n\necho $RESPONSE | grep -q \"err\"\n\nif [ $? -eq 0\
          \ ]; then\n  echo $APP_NAME not found\n  exit 1\nfi\n\nAPP_ID=$(echo ${RESPONSE}\
          \ | sed -e \"s/^.*id...//\" -e \"s/....\\$//\")\n\nRESPONSE=$(cat <<_EOF_\
          \ | fn_run_query\n{\"query\":\"{\n  instances(limit: 1) {\n    pageInfo\
          \ {\n      total\n    }\n  }\n }\"\n}\n_EOF_\n)\n\nTOTAL=$(echo ${RESPONSE}\
          \ | tr -dc '0-9')\necho \"TOTAL SI = $TOTAL\"\n\nRESPONSE=$(cat <<_EOF_\
          \ | fn_run_query\n{\"query\":\"{\n  instances(limit: 1, filters: [{application:\
          \ {operator: EQUALS, values: [\\\"$APP_ID\\\"]}}]) {\n    pageInfo {\n \
          \     total\n    }\n  }\n }\"\n}\n_EOF_\n)\n\nSI=$(echo ${RESPONSE} | tr\
          \ -dc '0-9')\necho \"$APP_NAME COUNT = $SI\""
        scriptType: BASH
        sshKeyRef: null
        sweepingOutputName: null
        sweepingOutputScope: null
        tags: null
        templateExpressions: null
        templateVariables: ''
        timeoutMillis: 60000
    stepsInParallel: false
  - type: K8S_PHASE_STEP
    name: Verify
    stepsInParallel: false
  - type: K8S_PHASE_STEP
    name: Wrap Up
    stepsInParallel: false
  provisionNodes: false
  serviceName: usheer1
  statefulSet: false
rollbackPhases:
- type: KUBERNETES
  computeProviderName: usheertestk8new1234
  daemonSet: false
  infraDefinitionName: testk8
  name: Rollback Rolling
  phaseNameForRollback: Rolling
  phaseSteps:
  - type: K8S_PHASE_STEP
    name: Deploy
    phaseStepNameForRollback: Deploy
    statusForRollback: SUCCESS
    steps:
    - type: K8S_DEPLOYMENT_ROLLING_ROLLBACK
      name: Rollback Deployment
    stepsInParallel: false
  - type: K8S_PHASE_STEP
    name: Wrap Up
    phaseStepNameForRollback: Wrap Up
    stepsInParallel: false
  provisionNodes: false
  serviceName: usheer1
  statefulSet: false
templatized: false
